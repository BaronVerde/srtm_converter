
/* Convert a previously created int16-file with header information to a png
 * image for use as a heightmap. */

#include <inttypes.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <tgmath.h>
#include <png.h>

#define MAX_LEN 200

int16_t **in_data = NULL;

typedef struct srtm_header_t {
	uint32_t num_columns;
	uint32_t num_rows;
	double longitude;
	double latitude;
	double cellsize;
	int no_data;
} srtm_header_t;

void allocate_in_data( srtm_header_t *header ) {
	in_data = malloc(header->num_rows*sizeof(int16_t*));
	for( uint32_t i=0; i<header->num_rows; ++i )
		in_data[i] = malloc(header->num_columns*sizeof(int16_t));
}

void free_in_data( srtm_header_t *header ) {
	for( uint32_t i=0; i<header->num_rows; ++i )
		free(in_data[i]);
	free(in_data);
}

void read_image( srtm_header_t *header, FILE *in_file ) {
	for( uint32_t i = 0; i < header->num_rows; ++i )
		fread( in_data[i], header->num_columns*sizeof(int16_t), 1, in_file );
}

void convert_tile( const uint32_t tile, const srtm_header_t *const header, const uint32_t tilesize,
		const uint32_t *const start_row, const uint32_t *const start_col, uint16_t **image ) {
	for( uint32_t row = start_row[tile]; row < start_row[tile]+tilesize; ++row ) {
		for( uint32_t col = start_col[tile]; col < start_col[tile]+tilesize; ++col ) {
			const int16_t value = in_data[col][row];
			image[col-start_col[tile]][row-start_row[tile]] =
					value < 0 || value == header->no_data ? 0 : (uint16_t)value;
		}
	}
	char filename[30];
	snprintf( filename, 29, "tile_%u_%03u.png", tilesize, tile );
	// print writing image x of y
	printf( "Writing tile image file '%s'\n", filename );
	png_structp png_stru = png_create_write_struct( PNG_LIBPNG_VER_STRING, NULL, NULL, NULL );
	if( !png_stru ) {
		fputs( "Error creating png struct", stderr );
		return;
	}
	png_infop png_inf = png_create_info_struct( png_stru );
	if( !png_inf ) {
		fputs( "Error creating png info struct", stderr );
		png_destroy_write_struct( &png_stru, &png_inf );
		return;
	}
	FILE *image_file = fopen( filename, "wb" );
	png_init_io( png_stru, image_file );
	png_set_IHDR(
			png_stru, png_inf, tilesize, tilesize, 16, PNG_COLOR_TYPE_GRAY,
			PNG_INTERLACE_NONE, PNG_COMPRESSION_TYPE_DEFAULT, PNG_FILTER_TYPE_DEFAULT
	);
	png_write_info( png_stru, png_inf );
	// Mind endianess
	png_set_swap( png_stru );
	for( uint32_t i = 0; i < tilesize; ++i )
		png_write_row( png_stru, (png_const_bytep)&image[i][0] );
	png_write_end( png_stru, png_inf );
	//png_destroy_write_struct( &png_stru, (png_infopp)NULL );
	png_destroy_write_struct( &png_stru, &png_inf );
	fclose(image_file);
}

int main(void) {
	const char data_filename[] = "data/ascii/data_52_06.int16";
	const char header_filename[] = "data/ascii/data_52_06.hdr";
	const uint32_t tilesize = 4096;
	FILE *hdr_file = fopen( header_filename, "rb" );
	if( !hdr_file )
		return EXIT_FAILURE;
	srtm_header_t header;
	fread( &header, sizeof(srtm_header_t), 1, hdr_file );
	fclose(hdr_file);
	FILE *in_file = fopen( data_filename, "rb" );
	if( !in_file )
		return EXIT_FAILURE;
	puts("Reading image");
	allocate_in_data(&header);
	read_image( &header, in_file );
	fclose(in_file);
	// Convert images
	puts("Converting images ...");
	// Filet the map into tiles starting at row/col
	const uint32_t num_h_tiles = (uint32_t)floor((float)header.num_columns/(float)tilesize);
	const uint32_t num_v_tiles = (uint32_t)floor((float)header.num_rows/(float)tilesize);
	printf( "Number of tiles horizontal/vertical: %d/%d\n", num_h_tiles, num_v_tiles );
	const uint32_t num_tiles = num_h_tiles * num_v_tiles;
	uint32_t start_row[num_tiles];
	uint32_t start_col[num_tiles];
	int k = 0;
	for( uint32_t i = 0; i < num_h_tiles; ++i ) {
		for( uint32_t j = 0; j < num_v_tiles; ++j ) {
			// @todo is this right ? 1 overlap ?
			start_row[k] = i*(tilesize-1);
			start_col[k] = j*(tilesize-1);
			printf("\tTile %d, starting at col/row %d/%d\n", k, start_col[k], start_row[k] );
			++k;
		}
	}

	// Make room for tile data
	uint16_t **out_image;
	out_image = malloc(sizeof(uint16_t*)*tilesize);
	for( uint32_t row = 0; row < tilesize; ++row )
		out_image[row] = malloc(sizeof(uint16_t)*tilesize);
	// copy over the tile window from the image data, determine min/max values
	for( uint32_t tile = 0; tile < num_tiles; ++tile ) {
		convert_tile( tile, &header, tilesize, start_row, start_col, out_image );
	}
	// cleanup
	for( uint32_t row = 0; row < tilesize; ++row )
		free(out_image[row]);
	free(out_image);

	free_in_data( &header );
	puts("Converter ending");
	return EXIT_SUCCESS;
}
